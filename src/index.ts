import { app, BrowserWindow } from 'electron';
import path from 'path'
import fs from 'fs'
import { v4 as uuid } from 'uuid'
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 720,
    width: 1280,
    darkTheme: true,
    backgroundColor: '#121212'
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// const pluginPath = path.join('full','path','to','TachiPC','src','.plugins') //in progress
// let modules: Array<{
//   id: string,
//   name: string,
//   search: (...opts: any) => Array<any>, //array of manga
//   manga: (...opts: any) => any, //manga page
//   chapter: (...opts: any) => any, //read one chapter
//   auth?: (...opts: any) => any, //login
// }>
// app.whenReady().then(() => {
//   fs.readdir(pluginPath, (error, files) => {
//     if(error) {
//       console.error(error)
//     }
//     else {
//       for (let i = 0; i < files.length; i++) {
//         if (path.extname(files[i]) == '.ts') {
//           import(path.join(pluginPath, files[i])).then((module) => { //implement catch if modulename not found
//             if (typeof module.auth === 'function') {
//               modules.push({
//                 id: uuid(),
//                 name: module.name,
//                 search: module.search,
//                 manga: module.manga,
//                 chapter: module.chapter,
//                 auth: module.auth
//               })
//             }
//             else {
//               modules.push({
//                 id: uuid(),
//                 name: module.name,
//                 search: module.search,
//                 manga: module.manga,
//                 chapter: module.chapter
//               })
//             }
//           }, (reason) => console.error(reason))
//         }
//       }
//     }
//   })
// }, (reason) => console.error(reason))

